---

# https://github.com/deoren/redmine-testing

# Ansible version of Bash shell script used to setup Redmine test environment

- hosts: localhost

  # TODO: Is this even needed?
  remote_user: root

#################################################
# Variables
#################################################

  vars:
    this_repo_name: "redmine-testing"
    local_repo_dest: "/tmp/{{ this_repo_name }}"
    git_repo_url: "https://github.com/deoren/{{ this_repo_name }}"

    redmine_svn_url: "http://svn.redmine.org/redmine/trunk"
    redmine_base_install_dir: "/opt/redmine"
    redmine_full_install_dir: "{{ redmine_base_install_dir }}/trunk"
    redmine_environment: development

    apt_key_nginx_url: https://nginx.org/keys/nginx_signing.key
    apt_key_mariadb_id: "0xF1656F24C74CD1D8"
    apt_key_phusion_passenger_id: "561F9B9CAC40B2F7"

    passenger_standalone_systemd_user: root
    passenger_standalone_systemd_group: root
    passenger_standalone_unix_socket: /var/run/passenger-redmine-trunk.socket
    passenger_standalone_service_account_name: redmine-trunk
    passenger_standalone_service_group_name: redmine-trunk

    mysql_database_name: redmine_trunk
    mysql_host: localhost
    mysql_user_name: redmine_trunk
    mysql_user_pass: redmine

    mariadb_release_version: 10.0

    core_package_list:
      - apt-transport-https
      - ca-certificates
      - nginx
      - ruby
      - ruby-dev
      - ruby-bundler
      - libsqlite3-dev
      - imagemagick
      - libmagickwand-dev
      - passenger
      - subversion
      - git
      - sqlite3
      - python3-pip
      - sqlitebrowser
      - python-mysqldb

    mariadb_package_list:
      - mariadb-server
      - libmariadbclient-dev

  tasks:

#################################################
# Fetch template files and other content via Git
#################################################

  - name: GIT | Fetch latest content
    git:
      repo: "{{ git_repo_url }}"
      version: HEAD
      clone: yes
      depth: 1
      dest: "{{ local_repo_dest }}"


#################################################
# Add apt repo package signing keys
#################################################

  - name: APT | Add Nginx apt repo key
    become: yes
    apt_key:
      url: "{{ apt_key_nginx_url }}"
      state: present

  - name: APT | Add MariaDB apt repo key
    become: yes
    apt_key:
      keyserver: keyserver.ubuntu.com
      id: "{{ apt_key_mariadb_id }}"
      state: present

  - name: APT | Add Phusion Passenger apt repo key
    become: yes
    apt_key:
      keyserver: keyserver.ubuntu.com
      id: "{{ apt_key_phusion_passenger_id }}"
      state: present


#################################################
# Deploy repo config files
#################################################

  - name: APT | Create preferences file for upstream nginx repo
    become: yes
    template:
      src: "{{ local_repo_dest }}/etc/apt/preferences.d/nginx"
      dest: "/etc/apt/preferences.d/nginx"

  - name: APT | Create apt config file for upstream nginx repo
    become: yes
    template:
      src: "{{ local_repo_dest }}/etc/apt/sources.list.d/nginx.list"
      dest: "/etc/apt/sources.list.d/nginx.list"

  - name: APT | Create apt config file for upstream Phusion Passenger repo
    become: yes
    template:
      src: "{{ local_repo_dest }}/etc/apt/sources.list.d/phusion-passenger.list"
      dest: "/etc/apt/sources.list.d/phusion-passenger.list"

  - name: APT | Create apt config file for upstream MariaDB {{ mariadb_release_version }} repo
    become: yes
    template:
      src: "{{ local_repo_dest }}/etc/apt/sources.list.d/mariadb-server.list"
      dest: "/etc/apt/sources.list.d/mariadb-server.list"


#################################################
# Deploy Nginx config files
#################################################

# http://www.mydailytutorials.com/ansible-template-module-examples/
# https://blog.knoldus.com/ansible-playbook-using-templates/

  # - name: Deploy Nginx config files
  #   become: yes
  #   template:
  #     src: "{{ item.src }}"
  #     dest: "{{ item.dest }}"
  #   with_items:
  #     - {src: "{{ local_repo_dest }}/etc/nginx/log_formats.conf", dest: '/etc/nginx/log_formats.conf'}
  #     - {src: "{{ local_repo_dest }}/etc/nginx/nginx.conf", dest: '/etc/nginx/nginx.conf'}
  #     - {src: "{{ local_repo_dest }}/etc/nginx/sites-available/redmine.conf", dest: '/etc/nginx/sites-available/redmine.conf'}
  #   notify:
  #    - restart nginx


# https://serverfault.com/questions/578544/deploying-a-folder-of-template-files-using-ansible
# https://serverfault.com/a/761550
# https://stackoverflow.com/questions/41667864/can-the-templates-module-handle-multiple-templates-directories
  - name: Nginx | Create config file directories
    become: yes
    file:
      state: directory
      dest: '/etc/nginx/{{ item.path }}'
      owner: root
      group: root
      mode: 0755
    with_filetree: '{{ local_repo_dest }}/etc/nginx/'
    when: item.state == 'directory'

  - name: Nginx | Deploy config files
    become: yes
    template:
      src: '{{ item.src }}'
      dest: '/etc/nginx/{{ item.path }}'
      owner: root
      group: root
      mode: 0644
    with_filetree: '{{ local_repo_dest }}/etc/nginx/'
    when: item.state == 'file'


#################################################
# Install packages
#################################################

  - name: Force update of apt cache after deploying template repo config files
    become: yes
    apt:
      update_cache: yes
      #cache_valid_time: 3600

  - name: Install core packages
    become: yes
    package:
      name: "{{ core_package_list }}"
      state: present

  - name: Install MariaDB-related packages
    become: yes
    package:
      name: "{{ mariadb_package_list }}"
      state: present


#################################################
# Create service account, group
#################################################

  - name: Create {{ passenger_standalone_service_group_name }} service group
    become: yes
    group:
      name: "{{ passenger_standalone_service_group_name }}"
      state: present
      system: yes

  - name: Create {{ passenger_standalone_service_account_name }} service account
    become: yes
    user:
      name: "{{ passenger_standalone_service_account_name }}"
      comment: Service account used by Phusion Passenger to run Redmine RoR web app
      group: "{{ passenger_standalone_service_group_name }}"
      state: present
      system: yes


#################################################
# Setup MySQL user, database for Redmine use
#################################################

  - name: MariaDB | Create {{ mysql_database_name }} db on {{ mysql_host }}
    mysql_db:
      login_user: root
      login_host: "{{ mysql_host }}"
      name: "{{ mysql_database_name }}"
      state: present

  - name: MariaDB | Create {{ mysql_user_name }} user account
    mysql_user:
      name: "{{ mysql_user_name }}"
      password: "{{ mysql_user_pass }}"
      priv: "{{mysql_database_name}}.*:ALL PRIVILEGES"
      host: "{{ mysql_host }}"
      login_user: root
      login_host: "{{ mysql_host }}"
      state: present


#################################################
# Deploy Redmine
#################################################

  - name: Redmine | Checkout Subversion repository
    become: yes
    subversion:
      repo: "{{ redmine_svn_url }}"
      dest: "{{ redmine_full_install_dir }}"

  - name: Redmine | Create needed directories
    become: yes
    file:
      path: "{{ item }}"
      state: directory
      owner: "{{ passenger_standalone_service_account_name }}"
      group: "{{ passenger_standalone_service_group_name }}"
      mode: 0755
    with_items:
      - "{{ redmine_full_install_dir }}/vendor/bundle"
      - "{{ redmine_full_install_dir }}/tmp"
      - "{{ redmine_full_install_dir }}/tmp/pdf"
      - "{{ redmine_full_install_dir }}/public/plugin_assets"

  - name: Redmine | Deploy database config file
    become: yes
    template:
      src: "{{ local_repo_dest }}/opt/redmine/trunk/config/database.yml"
      dest: "{{ redmine_full_install_dir }}/config/database.yml"
      owner: root
      group: "{{ passenger_standalone_service_group_name }}"
      mode: 0640

  - name: Redmine | Deploy Phusion Passenger Standalone config file
    become: yes
    template:
      src: "{{ local_repo_dest }}/opt/redmine/trunk/Passengerfile.json"
      dest: "{{ redmine_full_install_dir }}/Passengerfile.json"
      owner: "{{ passenger_standalone_service_account_name }}"
      group: "{{ passenger_standalone_service_group_name }}"
      mode: 0644

  - name: Redmine | Install Ruby gems/dependencies locally instead of system-wide
    bundler:
        become: yes
        become_user: "{{ passenger_standalone_service_account_name }}"
        chdir: "{{ redmine_full_install_dir }}"
        gem_path: "{{ redmine_full_install_dir }}/vendor/bundle"
        exclude_groups:
          - "development"
          - "test"
        state: present

  - name: Redmine | Generate Secret Token
    # FIXME: Shouldn't this "become" the service account first?
    become: yes
    shell: bundle exec rake generate_secret_token
    args:
      chdir: "{{ redmine_full_install_dir }}"
    environment:
      RAILS_ENV: "{{redmine_environment}}"

  - name: Redmine | Run database migrations
    shell: bundle exec rake db:migrate
    args:
      chdir: "{{ redmine_full_install_dir }}"
    environment:
      RAILS_ENV: "{{redmine_environment}}"

  - name: Redmine | Load initial/starter data
    shell: bundle exec rake redmine:load_default_data
    args:
      chdir: "{{ redmine_full_install_dir }}"
    environment:
      RAILS_ENV: "{{redmine_environment}}"
      REDMINE_LANG: "en"

  # Note: Required for SQLite3, completely optional for MariaDB/redmine/trunk
  - name: Redmine | Allow service account to write to database directory
    file:
      path: "{{ redmine_full_install_dir }}/db"
      state: directory
      owner: root
      group: "{{ passenger_standalone_service_group_name }}"
      mode: 0770

  - name: Redmine | Add execute bit to HTTP API submission script
    file:
      path: "{{ redmine_full_install_dir }}/extra/mail_handler/rdm-mailhandler.rb"
      mode: 0755

  - name: Redmine | Adjust permissions on directories post-install
    file:
      path: "{{ item }}"
      state: directory
      owner: "{{ passenger_standalone_service_account_name }}"
      group: "{{ passenger_standalone_service_group_name }}"
      mode: 0755
    with_items:
      - "{{ redmine_full_install_dir }}/tmp"
      - "{{ redmine_full_install_dir }}/log"
      - "{{ redmine_full_install_dir }}/files"
      - "{{ redmine_full_install_dir }}/public/plugin_assets"


#################################################
# Configure state of services
#################################################

  - name: Services | Deploy systemd config for Passenger Standalone instance
    become: yes
    template:
      src: "{{ local_repo_dest }}/etc/systemd/system/passenger-redmine-trunk.service"
      dest: "/etc/systemd/system/passenger-redmine-trunk.service"

  - name: Services | Reload list of systemd unit files in order to detect Passenger Standalone
    become: yes
    systemd:
      daemon_reload: yes

  - name: Services | Start Passenger Standalone, enable starting at boot
    become: yes
    service:
      name: passenger-redmine-trunk
      state: restarted
      enabled: yes

  - name: Services | Enable starting MariaDB at boot
    become: yes
    service:
      name: mysql
      state: restarted
      enabled: yes

  - name: Services | Enable starting Nginx at boot
    become: yes
    service:
      name: nginx
      state: restarted
      enabled: yes

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

    - name: restart passenger-redmine-trunk
      service:
        name: passenger-redmine-trunk
        state: restarted

