# https://github.com/deoren/redmine-testing

# Ansible version of Bash shell script used to setup Redmine test environment

# This playbook will ...
#
# * install apt repo signing keys
# * add upstream repos
# ** Phusion Passenger
# ** Nginx
# ** MariaDB
#
# * install required packages
#
# * Execute queries against MariaDB to configure database
# ** presumably native instead of shell command?
#
# * Checkout Redmine SVN repo
#
# * Deploy files
# ** templates?
#
# * Enable (explicitly) services to start at boot
#
# * Install Ruby gems via bundler
#
# * Add user account
#
# * Set permissions on content
#
# * Deploy systemd unit file

---
- hosts: localhost
  vars:
    this_repo_name: "redmine-testing"
    redmine_svn_url: "http://svn.redmine.org/redmine/trunk"
    redmine_base_install_dir: "/opt/redmine"
    redmine_full_install_dir: "{{ redmine_base_install_dir }}/trunk"
    git_repo_url: "https://github.com/deoren/{{ this_repo_name }}"
    apt_key_nginx_url: https://nginx.org/keys/nginx_signing.key
    apt_key_mariadb_id: "0xF1656F24C74CD1D8"
    apt_key_phusion_passenger_id: "561F9B9CAC40B2F7"

  remote_user: root
  tasks:

  - name: Fetch latest version of content from Git repo
    git:
      repo: "{{ git_repo_url }}"
      version: HEAD
      clone: yes
      depth: 1
      dest: "/tmp/{{ this_repo_name }}"

  - name: Update apt cache if needed
    become: yes
    apt:
      update_cache: yes
      cache_valid_time: 3600

  - name: Add Nginx apt repo key
    become: yes
    apt_key:
      url: "{{ apt_key_nginx_url }}"
      state: present

  - name: Add MariaDB apt repo key
    become: yes
    apt_key:
      keyserver: keyserver.ubuntu.com
      id: "{{ apt_key_mariadb_id }}"
      state: present

  - name: Add Phusion Passenger apt repo key
    become: yes
    apt_key:
      keyserver: keyserver.ubuntu.com
      id: "{{ apt_key_phusion_passenger_id }}"
      state: present

  - name: Write

  # - name: write the apache config file
  #   template:
  #     src: /srv/httpd.j2
  #     dest: /etc/httpd.conf
  #   notify:
  #   - restart apache
  # - name: ensure apache is running
  #   service:
  #     name: httpd
  #     state: started
  # handlers:
  #   - name: restart apache
  #     service:
  #       name: httpd
  #       state: restarted
