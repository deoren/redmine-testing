# https://github.com/deoren/redmine-testing

# Ansible version of Bash shell script used to setup Redmine test environment

# This playbook will ...
#
# * install apt repo signing keys
# * add upstream repos
# ** Phusion Passenger
# ** Nginx
# ** MariaDB
#
# * install required packages
#
# * Execute queries against MariaDB to configure database
# ** presumably native instead of shell command?
#
# * Checkout Redmine SVN repo
#
# * Deploy files
# ** templates?
#
# * Enable (explicitly) services to start at boot
#
# * Install Ruby gems via bundler
#
# * Add user account
#
# * Set permissions on content
#
# * Deploy systemd unit file

---
- hosts: localhost

  # TODO: Is this even needed?
  remote_user: root

#################################################
# Variables
#################################################

  vars:
    this_repo_name: "redmine-testing"
    local_repo_dest: "/tmp/{{ this_repo_name }}"
    redmine_svn_url: "http://svn.redmine.org/redmine/trunk"
    redmine_base_install_dir: "/opt/redmine"
    redmine_full_install_dir: "{{ redmine_base_install_dir }}/trunk"
    git_repo_url: "https://github.com/deoren/{{ this_repo_name }}"
    apt_key_nginx_url: https://nginx.org/keys/nginx_signing.key
    apt_key_mariadb_id: "0xF1656F24C74CD1D8"
    apt_key_phusion_passenger_id: "561F9B9CAC40B2F7"
    passenger_standalone_systemd_user: root
    passenger_standalone_systemd_group: root
    passenger_standalone_unix_socket: /var/run/passenger-redmine-trunk.socket
    passenger_standalone_service_account_name: redmine-trunk
    passenger_standalone_service_account_group: redmine-trunk
    mariadb_release_version: 10.0
    core_package_list:
      - apt-transport-https
      - ca-certificates
      - nginx
      - ruby
      - ruby-dev
      - ruby-bundler
      - libsqlite3-dev
      - imagemagick
      - libmagickwand-dev
      - passenger
      - subversion
      - git
      - sqlite3
      - python3-pip
      - sqlitebrowser
    mariadb_package_list:
      - mariadb-server
      - libmariadbclient-dev

  tasks:

#################################################
# Fetch template files and other content via Git
#################################################

  - name: Fetch latest version of content from Git repo
    git:
      repo: "{{ git_repo_url }}"
      version: HEAD
      clone: yes
      depth: 1
      dest: "{{ local_repo_dest }}"


#################################################
# Add apt repo package signing keys
#################################################

  - name: Add Nginx apt repo key
    become: yes
    apt_key:
      url: "{{ apt_key_nginx_url }}"
      state: present

  - name: Add MariaDB apt repo key
    become: yes
    apt_key:
      keyserver: keyserver.ubuntu.com
      id: "{{ apt_key_mariadb_id }}"
      state: present

  - name: Add Phusion Passenger apt repo key
    become: yes
    apt_key:
      keyserver: keyserver.ubuntu.com
      id: "{{ apt_key_phusion_passenger_id }}"
      state: present


#################################################
# Deploy repo config files
#################################################

  - name: Write apt preferences config file for upstream nginx repo
    become: yes
    template:
      src: "{{ local_repo_dest }}/etc/apt/preferences.d/nginx"
      dest: "/etc/apt/preferences.d/nginx"

  - name: Write apt config file for upstream nginx repo
    become: yes
    template:
      src: "{{ local_repo_dest }}/etc/apt/sources.list.d/nginx.list"
      dest: "/etc/apt/sources.list.d/nginx.list"

  - name: Write apt config file for upstream Phusion Passenger repo
    become: yes
    template:
      src: "{{ local_repo_dest }}/etc/apt/sources.list.d/phusion-passenger.list"
      dest: "/etc/apt/sources.list.d/phusion-passenger.list"

  - name: Write apt config file for upstream MariaDB {{ mariadb_release_version }} repo
    become: yes
    template:
      src: "{{ local_repo_dest }}/etc/apt/sources.list.d/mariadb-server.list"
      dest: "/etc/apt/sources.list.d/mariadb-server.list"


#################################################
# Deploy Nginx config files
#################################################

# http://www.mydailytutorials.com/ansible-template-module-examples/
# https://blog.knoldus.com/ansible-playbook-using-templates/

  # - name: Deploy Nginx config files
  #   become: yes
  #   template:
  #     src: "{{ item.src }}"
  #     dest: "{{ item.dest }}"
  #   with_items:
  #     - {src: "{{ local_repo_dest }}/etc/nginx/log_formats.conf", dest: '/etc/nginx/log_formats.conf'}
  #     - {src: "{{ local_repo_dest }}/etc/nginx/nginx.conf", dest: '/etc/nginx/nginx.conf'}
  #     - {src: "{{ local_repo_dest }}/etc/nginx/sites-available/redmine.conf", dest: '/etc/nginx/sites-available/redmine.conf'}
  #   notify:
  #    - restart nginx


# https://serverfault.com/questions/578544/deploying-a-folder-of-template-files-using-ansible
# https://serverfault.com/a/761550
  # - name: Deploy Nginx config files
  #   become: yes
  #   template:
  #     src: '{{ item.src }}'
  #     dest: //etc/nginx/{{ item.path }}
  #     force: yes
  #   with_filetree: "{{ local_repo_dest }}/etc/nginx/"
  #   when: item.state == 'file'
  #   notify:
  #    - restart nginx

# TODO: Will need to use the approach below as the paths have to exist first

# https://stackoverflow.com/questions/41667864/can-the-templates-module-handle-multiple-templates-directories
  - name: Create Nginx config file directories
    become: yes
    file:
      state: directory
      dest: '/etc/{{ item.path }}'
      owner: root
      group: root
      mode: 0755
    with_filetree: '{{ local_repo_dest }}/etc/nginx/'
    when: item.state == 'directory'

  - name: Deploy Nginx config files
    become: yes
    template:
      src: '{{ item.src }}'
      dest: '/etc/{{ item.path }}'
      owner: root
      group: root
      mode: 0644
    with_filetree: '{{ local_repo_dest }}/etc/nginx/'
    when: item.state == 'file'

#################################################
# Install packages
#################################################

  - name: Force update of apt cache after deploying template repo config files
    become: yes
    apt:
      update_cache: yes
      #cache_valid_time: 3600

  - name: Install core packages
    become: yes
    package:
      name: "{{ core_package_list }}"
      state: present

  - name: Install MariaDB-related packages
    become: yes
    package:
      name: "{{ mariadb_package_list }}"
      state: present


#################################################
# Configure state of services
#################################################

  - name: Deploy systemd config for Passenger Standalone instance
    become: yes
    template:
      src: "{{ local_repo_dest }}/etc/systemd/system/passenger-redmine-trunk.service"
      dest: "/etc/systemd/system/passenger-redmine-trunk.service"

  - name: Reload list of systemd unit files in order to detect Passenger Standalone
    become: yes
    systemd:
      daemon_reload: yes

  - name: Start Passenger Standalone, enable starting at boot
    service:
      name: passenger-redmine-trunk
      state: restarted
      enabled: yes

  - name: Enable starting MariaDB at boot
    service:
      name: mysql
      state: restarted
      enabled: yes

  - name: Enable starting Nginx at boot
    service:
      name: nginx
      state: restarted
      enabled: yes

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted


  # Deploy systemd config file

  # Enable services to start at boot
